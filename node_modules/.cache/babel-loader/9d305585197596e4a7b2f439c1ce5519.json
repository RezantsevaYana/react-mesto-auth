{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co'; // запрос на регистрацию на сервере\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(checkResult);\n}; // запрос на авторизацию на сервере\n\nexport const login = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(checkResult).then(data => {\n    if (data.jwt) {\n      localStorage.setItem('jwt', data.jwt);\n      return data;\n    } else {\n      return;\n    }\n  });\n}; // проверка валидности токена и полученя email для вставки в шапку сайта\n\nexport const checkToken = jwt => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${jwt}`\n    }\n  }).then(checkResult);\n};\n\nfunction checkResult(res) {\n  if (res.ok) {\n    return res.json();\n  }\n\n  return Promise.reject(`Ошибка: ${res.status}`);\n}","map":{"version":3,"sources":["/Users/rezanceva96/react-mesto-auth/src/utils/auth.js"],"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","checkResult","login","data","jwt","localStorage","setItem","checkToken","Authorization","res","ok","json","Promise","reject","status"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAAjB,C,CAEP;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AACjCK,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf;AAN2B,GAAvB,CAAL,CAOJO,IAPI,CAOCC,WAPD,CAAP;AAQD,CATI,C,CAWP;;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACV,KAAD,EAAQC,QAAR,KAAqB;AACtC,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AACjCK,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf;AAN2B,GAAvB,CAAL,CAOJO,IAPI,CAOCC,WAPD,EAQJD,IARI,CAQEG,IAAD,IAAU;AACd,QAAIA,IAAI,CAACC,GAAT,EAAa;AACXC,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BH,IAAI,CAACC,GAAjC;AACA,aAAOD,IAAP;AACD,KAHD,MAGO;AACL;AACD;AACD,GAfG,CAAP;AAgBD,CAjBI,C,CAmBP;;AAEA,OAAO,MAAMI,UAAU,GAAIH,GAAD,IAAS;AACjC,SAAOV,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;AACnCK,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB,kBAFT;AAGPY,MAAAA,aAAa,EAAG,UAASJ,GAAI;AAHtB;AAF0B,GAAzB,CAAL,CAOJJ,IAPI,CAOCC,WAPD,CAAP;AAQD,CATM;;AAaN,SAASA,WAAT,CAAsBQ,GAAtB,EAA4B;AACzB,MAAIA,GAAG,CAACC,EAAR,EAAY;AACR,WAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;;AACD,SAAOC,OAAO,CAACC,MAAR,CAAgB,WAAUJ,GAAG,CAACK,MAAO,EAArC,CAAP;AACH","sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\n\n// запрос на регистрацию на сервере\n\nexport const register = (email, password) => {\n    return fetch(`${BASE_URL}/signup`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    }).then(checkResult)\n  };\n\n// запрос на авторизацию на сервере\n\nexport const login = (email, password) => {\n    return fetch(`${BASE_URL}/signin`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    }).then(checkResult)\n      .then((data) => {\n        if (data.jwt){\n          localStorage.setItem('jwt', data.jwt);\n          return data;\n        } else {\n          return;\n        }\n       })\n  };\n\n// проверка валидности токена и полученя email для вставки в шапку сайта\n\nexport const checkToken = (jwt) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${jwt}`,\n    },\n  }).then(checkResult);\n};\n\n\n\n function checkResult (res)  {\n    if (res.ok) {\n        return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n}"]},"metadata":{},"sourceType":"module"}