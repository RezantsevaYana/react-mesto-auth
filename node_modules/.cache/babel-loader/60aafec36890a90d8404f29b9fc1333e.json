{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co'; // запрос на регистрацию на сервере\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: POST,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': \"application/json\"\n    },\n    body: JSON.stringify({\n      \"email\": email,\n      \"password\": password\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n  });\n}; // запрос на авторизацию на сервере\n\nexport const login = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: POST,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': \"application/json\"\n    },\n    body: JSON.stringify({\n      \"email\": email,\n      \"password\": password\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n  });\n}; // проверка валидности токена и полученя email для вставки в шапку сайта\n\nexport const checkToken = jwt => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: GET,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': \"application/json\",\n      \"Authorization\": `Bearer ${jwt}`\n    },\n    body: JSON.stringify({\n      \"email\": email,\n      \"password\": password\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n  });\n};","map":{"version":3,"sources":["/Users/rezanceva96/react-mesto-auth/src/utils/auth.js"],"names":["BASE_URL","register","email","password","fetch","method","POST","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","status","login","checkToken","jwt","GET"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAAjB,C,CAEP;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AAC/BK,IAAAA,MAAM,EAAEC,IADuB;AAE/BC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB;AAFX,KAFsB;AAM/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB,eAASR,KADQ;AAEjB,kBAAYC;AAFK,KAAf,EAKLQ,IALK,CAKCC,GAAD,IAAS;AACX,UAAIA,GAAG,CAACC,EAAR,EAAY;AACR,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;;AACD,aAAOC,OAAO,CAACC,MAAR,CAAgB,WAAUJ,GAAG,CAACK,MAAO,EAArC,CAAP;AACH,KAVK;AANyB,GAAvB,CAAZ;AAkBH,CAnBM,C,CAqBP;;AAEA,OAAO,MAAMC,KAAK,GAAG,CAAChB,KAAD,EAAQC,QAAR,KAAqB;AACtC,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AAC/BK,IAAAA,MAAM,EAAEC,IADuB;AAE/BC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB;AAFX,KAFsB;AAM/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB,eAASR,KADQ;AAEjB,kBAAYC;AAFK,KAAf,EAKLQ,IALK,CAKCC,GAAD,IAAS;AACX,UAAIA,GAAG,CAACC,EAAR,EAAY;AACR,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;;AACD,aAAOC,OAAO,CAACC,MAAR,CAAgB,WAAUJ,GAAG,CAACK,MAAO,EAArC,CAAP;AACH,KAVK;AANyB,GAAvB,CAAZ;AAkBH,CAnBM,C,CAqBP;;AAEA,OAAO,MAAME,UAAU,GAAIC,GAAD,IAAS;AAC/B,SAAOhB,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;AACjCK,IAAAA,MAAM,EAAEgB,GADyB;AAEjCd,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB,kBAFX;AAGL,uBAAmB,UAASa,GAAI;AAH3B,KAFwB;AAOjCZ,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB,eAASR,KADQ;AAEjB,kBAAYC;AAFK,KAAf,EAKLQ,IALK,CAKCC,GAAD,IAAS;AACX,UAAIA,GAAG,CAACC,EAAR,EAAY;AACR,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;;AACD,aAAOC,OAAO,CAACC,MAAR,CAAgB,WAAUJ,GAAG,CAACK,MAAO,EAArC,CAAP;AACH,KAVK;AAP2B,GAAzB,CAAZ;AAmBH,CApBM","sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\n\n// запрос на регистрацию на сервере\n\nexport const register = (email, password) => {\n    return fetch(`${BASE_URL}/signup`, {\n        method: POST, \n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': \"application/json\"\n        },\n        body: JSON.stringify({\n            \"email\": email,\n            \"password\": password,\n\n        })\n        .then((res) => {\n            if (res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Ошибка: ${res.status}`);\n        }) \n    })\n}\n\n// запрос на авторизацию на сервере\n\nexport const login = (email, password) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: POST, \n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': \"application/json\"\n        },\n        body: JSON.stringify({\n            \"email\": email,\n            \"password\": password,\n\n        })\n        .then((res) => {\n            if (res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Ошибка: ${res.status}`);\n        }) \n    })\n}\n\n// проверка валидности токена и полученя email для вставки в шапку сайта\n\nexport const checkToken = (jwt) => {\n    return fetch(`${BASE_URL}/users/me`, {\n        method: GET, \n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': \"application/json\",\n            \"Authorization\" : `Bearer ${jwt}`\n        },\n        body: JSON.stringify({\n            \"email\": email,\n            \"password\": password,\n\n        })\n        .then((res) => {\n            if (res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Ошибка: ${res.status}`);\n        }) \n    })\n}"]},"metadata":{},"sourceType":"module"}