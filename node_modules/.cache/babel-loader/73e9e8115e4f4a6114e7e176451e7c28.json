{"ast":null,"code":"export class Api {\n  constructor() {\n    this._checkResult = res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    };\n\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  // загрузка информации о пользователе сервиса\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._checkResult);\n  }\n\n  // редактирование профиля\n  editUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      }),\n      headers: this._headers\n    }).then(this._checkResult);\n  } // загрузка начальных карточек с сервера\n\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._checkResult);\n  } // добавление новой карточки\n\n\n  addCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      }),\n      headers: this._headers\n    }).then(this._checkResult);\n  } // удаление карточки\n\n\n  deleteCards(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResult);\n  } // постановка и удаление лайка\n\n\n  changeLikeCardStatus(cardId, isLiked) {\n    if (isLiked) {\n      return fetch(`${this._baseUrl}/cards/like/${cardId}`, {\n        method: \"PUT\",\n        headers: this._headers\n      }).then(this._checkResult);\n    } else {\n      return fetch(`${this._baseUrl}/cards/like/${cardId}`, {\n        method: \"DELETE\",\n        headers: this._headers\n      }).then(this._checkResult);\n    }\n  }\n  /*\n   // постановка лайка\n   likeCard(cardId) {\n      return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n          method: 'PUT',\n          headers: this._headers\n      })\n      .then(this._checkResult);\n  }\n   // удаление лайка\n   deleteLikeCard(cardId) {\n      return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n          method: 'DELETE',\n          headers: this._headers\n      })\n      .then(this._checkResult);\n  }\n   */\n  // обновление аватара пользователя\n\n\n  editAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.link\n      })\n    }).then(this._checkResult);\n  } // проверка, все ли в порядке с ответом\n\n\n}\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-28',\n  headers: {\n    authorization: '55468280-6bda-4917-a0aa-0d599bf33abe',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"sources":["/Users/rezanceva96/mesto-react/src/utils/api.js"],"names":["Api","constructor","_checkResult","res","ok","json","Promise","reject","status","_baseUrl","options","baseUrl","_headers","headers","getUserInfo","fetch","then","editUserInfo","data","method","body","JSON","stringify","name","about","getInitialCards","addCard","link","deleteCards","cardId","changeLikeCardStatus","isLiked","editAvatar","avatar","api","authorization"],"mappings":"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","sourcesContent":["export class Api {\n    constructor() {\n        this._baseUrl = options.baseUrl;\n        this._headers = options.headers;\n    };\n\n    // загрузка информации о пользователе сервиса\n    getUserInfo() {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: this._headers})\n            .then(this._checkResult);\n    };\n\n    // редактирование профиля\n    editUserInfo(data) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'PATCH',\n            body: JSON.stringify({\n              name: data.name,\n              about: data.about,\n            }),\n            headers: this._headers\n          })\n          .then(this._checkResult);\n    }\n\n\n    // загрузка начальных карточек с сервера\n    getInitialCards() {\n        return fetch(`${this._baseUrl}/cards`, {\n            headers: this._headers,})\n            .then(this._checkResult);\n    }\n\n    \n    // добавление новой карточки\n    addCard(data) {\n        return fetch(`${this._baseUrl}/cards`, {\n            method: 'POST', \n            body: JSON.stringify({\n                name: data.name,\n                link: data.link\n            }),\n            headers: this._headers\n        })\n            .then(this._checkResult);\n    }\n\n    \n    // удаление карточки\n    deleteCards(cardId) {\n        return fetch(`${this._baseUrl}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: this._headers\n        })\n        .then(this._checkResult);\n    }\n\n    // постановка и удаление лайка\n\n    changeLikeCardStatus(cardId, isLiked) {\n        if (isLiked) {\n          return fetch(`${this._baseUrl}/cards/like/${cardId}`, {\n            method: \"PUT\",\n            headers: this._headers\n            })\n            .then(this._checkResult);\n        } else {\n          return fetch(`${this._baseUrl}/cards/like/${cardId}`, {\n            method: \"DELETE\",\n            headers: this._headers\n            })\n            .then(this._checkResult);\n        }\n      }\n    \n    /*\n\n    // постановка лайка\n\n    likeCard(cardId) {\n        return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n            method: 'PUT',\n            headers: this._headers\n        })\n        .then(this._checkResult);\n    }\n\n    // удаление лайка\n\n    deleteLikeCard(cardId) {\n        return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n            method: 'DELETE',\n            headers: this._headers\n        })\n        .then(this._checkResult);\n    }\n\n    */\n\n    // обновление аватара пользователя\n\n    editAvatar(data) {\n        return fetch(`${this._baseUrl}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: data.link\n            })\n        })\n        .then(this._checkResult);\n    }\n\n\n    // проверка, все ли в порядке с ответом\n\n    _checkResult = (res) => {\n        if (res.ok) {\n            return res.json();\n        }\n\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n}\n\n\n\nexport const api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-28',\n    headers: {\n        authorization: '55468280-6bda-4917-a0aa-0d599bf33abe',\n        'Content-Type': 'application/json'\n    },\n});\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}