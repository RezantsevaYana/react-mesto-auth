{"ast":null,"code":"class Api {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this._checkResult = res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    };\n\n    this._baseUrl = baseUrl, this._headers = headers;\n  } // загрузка информации о пользователе сервиса\n\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._checkResult);\n  } // редактирование профиля\n\n\n  editUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      }),\n      headers: this._headers\n    }).then(this._checkResult);\n  } // загрузка начальных карточек с сервера\n\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._checkResult);\n  } // добавление новой карточки\n\n\n  addCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      }),\n      headers: this._headers\n    }).then(this._checkResult);\n  } // удаление карточки\n\n\n  deleteCards(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResult);\n  } // постановка лайка\n\n\n  likeCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._checkResult);\n  } // удаление лайка\n\n\n  deleteLikeCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResult);\n  } // обновление аватара пользователя\n\n\n  editAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.link\n      })\n    }).then(this._checkResult);\n  } // проверка, все ли в порядке с ответом\n\n\n}","map":{"version":3,"sources":["/Users/rezanceva96/mesto-react/mesto-react/src/utils/Api.js"],"names":["Api","constructor","baseUrl","headers","_checkResult","res","ok","json","Promise","reject","status","_baseUrl","_headers","getUserInfo","fetch","then","editUserInfo","data","method","body","JSON","stringify","name","about","getInitialCards","addCard","link","deleteCards","cardId","likeCard","deleteLikeCard","editAvatar","avatar"],"mappings":"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","sourcesContent":["\nclass Api {\n    constructor({baseUrl, headers}) {\n        this._baseUrl = baseUrl, \n        this._headers = headers\n    }\n\n    // загрузка информации о пользователе сервиса\n    getUserInfo() {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: this._headers})\n            .then(this._checkResult)\n    }\n\n    // редактирование профиля\n    editUserInfo(data) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'PATCH',\n            body: JSON.stringify({\n              name: data.name,\n              about: data.about,\n            }),\n            headers: this._headers\n          })\n          .then(this._checkResult)\n    }\n\n\n    // загрузка начальных карточек с сервера\n    getInitialCards() {\n        return fetch(`${this._baseUrl}/cards`, {\n            headers: this._headers,})\n            .then(this._checkResult)\n    }\n\n    \n    // добавление новой карточки\n    addCard(data) {\n        return fetch(`${this._baseUrl}/cards`, {\n            method: 'POST', \n            body: JSON.stringify({\n                name: data.name,\n                link: data.link\n            }),\n            headers: this._headers\n        })\n            .then(this._checkResult)\n    }\n\n    \n    // удаление карточки\n    deleteCards(cardId) {\n        return fetch(`${this._baseUrl}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: this._headers\n        })\n        .then(this._checkResult)\n    }\n    \n\n    // постановка лайка\n\n    likeCard(cardId) {\n        return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n            method: 'PUT',\n            headers: this._headers\n        })\n        .then(this._checkResult)\n    }\n\n    // удаление лайка\n\n    deleteLikeCard(cardId) {\n        return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n            method: 'DELETE',\n            headers: this._headers\n        })\n        .then(this._checkResult)\n    }\n\n    // обновление аватара пользователя\n\n    editAvatar(data) {\n        return fetch(`${this._baseUrl}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: data.link\n            })\n        })\n        .then(this._checkResult)\n    }\n\n\n    // проверка, все ли в порядке с ответом\n\n    _checkResult = (res) => {\n        if (res.ok) {\n            return res.json();\n        }\n\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}